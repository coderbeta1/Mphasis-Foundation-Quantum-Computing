    def check_time_diff(flight_network, disrupted_flights):
        current_net = flight_network[flight_network['InventoryId'].isin(disrupted_flights)].copy()
        current_net.sort_values(by="DepartureDateTime", inplace=True)

        final = []
        while True:
            if len(current_net) == 0: break
            if len(current_net) == 1: 
                final.append([current_net.iloc[0,:]['InventoryId']]) 
                break
            current_batch = []
            lost_batch = []
            prev_row = current_net.iloc[0,:]
            for i in range(1, len(current_net)):
                current_row = current_net.iloc[i,:]
                curr_time_diff = (datetime.strptime(current_row['DepartureDateTime'], "%Y-%m-%d %H:%M:%S") - datetime.strptime(prev_row['DepartureDateTime'], "%Y-%m-%d %H:%M:%S")).total_seconds()/3600
                if curr_time_diff>72:
                    if len(current_batch) == 0:
                        current_batch.append(prev_row['InventoryId']) 
                    current_batch.append(current_row['InventoryId'])
                    prev_row = current_net.iloc[i,:]
                else:
                    lost_batch.append(current_row['InventoryId'])
            current_net = current_net[current_net['InventoryId'].isin(lost_batch)]
            if len(current_batch)>=1:final.append(current_batch)
            
        return final
		
		
def csv_reader_buss(noel):
    scoring = {}
    scoring_toggle = {}
    for i in range(len(noel)):
        current = noel.iloc[i,:]
        scoring[current['Business Rules']] = current['Score']
        scoring_toggle[current['Business Rules']] = current['On/Off']
    return scoring, scoring_toggle

def csv_reader_plane(noel):
    scoring = {}
    scoring_toggle = {}
    for i in range(len(noel)):
        current = noel.iloc[i,:]
        scoring[current['Flight Rules']] = current['Score']
        scoring_toggle[current['Flight Rules']] = current['On/Off']
    return scoring, scoring_toggle

